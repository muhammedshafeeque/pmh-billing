"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceNumber = void 0;
var InvoiceNumber = /** @class */ (function () {
    function InvoiceNumber() {
    }
    InvoiceNumber.next = function (invoiceNumber) {
        return this._next(invoiceNumber);
    };
    InvoiceNumber._next = function (invoiceNumber) {
        if (!invoiceNumber)
            throw new Error('invoiceNumber cannot be empty');
        var array = invoiceNumber.split(/[_/:\-;\\]+/);
        var lastSegment = array.pop() || '';
        var priorSegment = invoiceNumber.substring(0, invoiceNumber.indexOf(lastSegment));
        var nextNumber = this.alphaNumericIncrementer(lastSegment);
        return priorSegment + nextNumber;
    };
    InvoiceNumber.alphaNumericIncrementer = function (str) {
        if (str && str.length > 0) {
            var invNum = str.replace(/([^a-z0-9]+)/gi, '');
            invNum = invNum.toUpperCase();
            var index = invNum.length - 1;
            while (index >= 0) {
                if (invNum.substring(index, index + 1) === '9') {
                    invNum = invNum.substring(0, index) + '0' + invNum.substring(index + 1);
                }
                else if (invNum.substring(index, index + 1) === 'Z') {
                    invNum = invNum.substring(0, index) + 'A' + invNum.substring(index + 1);
                }
                else {
                    var char = String.fromCharCode(invNum.charCodeAt(index) + 1);
                    invNum = invNum.substring(0, index) + char + invNum.substring(index + 1);
                    index = 0;
                }
                index--;
            }
            return invNum;
        }
        else {
            throw new Error('str cannot be empty');
        }
    };
    return InvoiceNumber;
}());
exports.InvoiceNumber = InvoiceNumber;
